apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.openjdk.jmh:jmh-core:0.5.3'
    compile 'org.openjdk.jmh:jmh-generator-annprocess:0.5.3'
}

test {
    systemProperties 'property': 'value'
}


task benchmarks(type: JavaExec) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.main.runtimeClasspath + sourceSets.main.output
    maxHeapSize = "512m"

    if (project.hasProperty('jmh')) {
        args(jmh.split(' '))
    } else {
        //args '-h' // help output
        args '-f' // fork
        args '1'
        args '-tu' // time unit
        args 'ns'
        args '-bm' // benchmark mode
        args 'avgt'
        args '-wi' // warmup iterations
        args '5'
        args '-i' // test iterations
        args '5'
        args '-r' // time per execution in seconds
        args '5'
        //args '-prof' // profilers
        //args 'HS_GC' // HotSpot (tm) memory manager (GC) profiling via implementation-specific MBeans
        //args 'HS_RT' // HotSpot (tm) runtime profiling via implementation-specific MBeans
        //args 'HS_THR' // HotSpot (tm) threading subsystem via implementation-specific MBeans
        //args 'HS_COMP' // HotSpot (tm) JIT compiler profiling via implementation-specific MBeans
        //args 'HS_CL' // HotSpot (tm) classloader profiling via implementation-specific MBeans
        //args 'STACK' // Simple and naive Java stack profiler
        args '.*OperatorSerializePerf.*' // for running only a specific test
    }
}